// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  ADMIN
  USER
}

enum AllegianceRole {
  LEADER
  MEMBER
}

enum Status {
  SUCCESS
  PENDING
  FAILED
}

enum FriendStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum GeneratedStatus {
  DONE
  PENDING
  FAILED
}

enum QuizAccess {
  PUBLIC
  PRIVATE
  FRIENDS
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime?

  @@unique([identifier, token])
  @@index([token])
}

model User {
  id             String    @id @default(cuid())
  userName       String?   @unique
  name           String?
  primaryColor   String?
  secondaryColor String?
  credits        Int       @default(0)
  creditsMultiplier Float  @default(1)
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  prize          String?
  status         String?
  accounts       Account[]
  sessions       Session[]
  role           Role      @default(USER)

  cheatUsed           Boolean              @default(false)
  cheatUsedAt         DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime?
  totalScore          Int                  @default(0)

  profilePictures     UserProfilePicture[]
  allegiance          AllegianceMember?
  collection          UserItem[]
  // -------quizzes relations
  quizCategories      QuizCategory[]
  categories          Category[]
  userAnswers         UserAnswer[]
  userAnsweredQuizzes UserAnsweredQuiz[]
  ownedQuizzes        Quiz[]
  assignedQuizzes     UserAssignedQuiz[]       @relation(name: "owner")
  assignedToMeQuizzes UserAssignedQuiz[]
  likedQuizzes        UserLikedQuiz[]
  // this relation is for saving public quizzes
  savedQuizzes        UserSavedQuiz[]          
  // these relations are for sharing quizzes with friends
  sharedQuizzes       UserSharedQuiz[]         @relation(name: "owner")
  sharedWithQuizzes   UserSharedQuiz[]
  // -------quizzes relations
  
  // need 2 relations for friends
  // one for the user that initiated the friend request
  // one for the user that received the friend request
  friends             UserFriend[]         @relation(name: "owner")
  friendOf            UserFriend[]         @relation(name: "friend")
}

model UserFriend {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    FriendStatus @default(PENDING) // pending, accepted, declined

  // the user that initiated the friend request is the userId
  // the user that received the friend request is the friendId

  userId String
  user   User   @relation(name: "owner", fields: [userId], references: [id], onDelete: Cascade)

  friendId String
  friend   User   @relation(name: "friend", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
}

model UserProfilePicture {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profilePictureId Int
  profilePicture   ProfilePicture @relation(fields: [profilePictureId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([profilePictureId])
  @@index([userId])
}

model ProfilePicture {
  id        Int      @id @default(autoincrement())
  name      String
  gen       Int
  shiny     Boolean  @default(false)
  mega      Boolean  @default(false)
  legendary Boolean  @default(false)
  createdAt DateTime @default(now())

  cost            Int                  @default(10)
  image           String
  profilePictures UserProfilePicture[]

  @@index([gen])
}

model UserItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  itemId Int
  item   Item @relation(fields: [itemId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([itemId])
  @@index([userId])
}

model Item {
  id    Int    @id @default(autoincrement())
  name  String
  numId Int?
  data  Json
  cost  Int    @default(30)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image String
  users UserItem[]

  @@index([numId])
  @@index([name])
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  daysLength Int      @default(1) // number of days
  quizLength Int      @default(10) // number of questions
  createdAt DateTime  @default(now())
  updatedAt DateTime?

  userId    String?
  user      User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  allegianceId String?
  allegiance   Allegiance? @relation(fields: [allegianceId], references: [id], onDelete: Cascade)

  quizCategory   QuizCategory[]
  theme          Theme[]
  allegianceQuiz AllegianceQuiz[]

  @@unique([name, allegianceId])
  @@unique([name, userId])
  @@index([userId])
  @@index([allegianceId])
}

// specific theme for a category
model Theme {
  id         Int      @id @default(autoincrement())
  name       String
  daysLength Int      @default(1) // number of days
  quizLength Int      @default(10) // number of questions
  isUsed     Boolean  @default(false)
  beginDate  DateTime @default(now())
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  QuizCategory QuizCategory[]

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([name, categoryId])
  @@index([categoryId])
}

// acts as a pointer to all the quizzes that are related to a specific category and theme
model QuizCategory {
  id         Int      @id @default(autoincrement())
  basePrompt String
  sdPrompt   String   @default(" ")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  quizzes    Quiz[]

  userId      String?
  user        User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  allegianceId String?
  allegiance   Allegiance? @relation(fields: [allegianceId], references: [id], onDelete: Cascade)

  themeId Int?
  theme   Theme? @relation(fields: [themeId], references: [id], onDelete: Cascade)

  categoryId Int      
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([themeId])
  @@index([categoryId])
  @@index([allegianceId])
}

model Quiz {
  id             Int              @id @default(autoincrement())
  scoreAmt       Int              @default(3)
  public         QuizAccess       @default(PUBLIC)
  dateDue        DateTime?
  likes          Int              @default(0) // linked to LikedQuiz
  shares         Int              @default(0) // linked to SharedQuiz
  completions    Int              @default(0) // linked to UserAnswerQuiz
  saves          Int              @default(0) // linked to SavedQuiz
  image          String?
  genStatus      GeneratedStatus           @default(PENDING) 
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  reasonForFail  String?
  rooms          Room[]

  questions      Question[]
  userAnswers    UserAnsweredQuiz[]
  allegianceQuiz AllegianceQuiz?
  assignedQuiz   UserAssignedQuiz[]
  likedQuiz      UserLikedQuiz[]
  sharedQuiz     UserSharedQuiz[]
  savedQuiz      UserSavedQuiz[]

  ownerId String?
  owner   User?   @relation(fields: [ownerId], references: [id])

  quizCategoryId Int
  quizCategory   QuizCategory @relation(fields: [quizCategoryId], references: [id], onDelete: Cascade)

  @@index([ownerId])
  @@index([quizCategoryId])
}

model Room {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roomId    String   @unique

  quizId Int
  quiz   Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  // users RoomUser[]
  @@index([quizId])
}

model UserAssignedQuiz {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  year      Int?            @db.TinyInt
  month     Int?            @db.TinyInt
  day       Int?            @db.TinyInt

  quizId Int
  quiz   Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(name: "owner", fields: [userId], references: [id], onDelete: Cascade)

  assigneeId String
  assignee   User   @relation(fields: [assigneeId], references: [id], onDelete: Cascade)

  @@unique([quizId, assigneeId])
  @@index([quizId])
  @@index([userId])
  @@index([assigneeId])
}

model UserLikedQuiz {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  quizId Int
  quiz   Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([quizId])
  @@index([userId])
}

model UserSavedQuiz {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  quizId Int
  quiz   Quiz @relation(fields: [quizId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([quizId])
  @@index([userId])
}

model UserSharedQuiz {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  quizId Int
  quiz   Quiz @relation(fields: [quizId], references: [id])

  userId String
  user   User   @relation(name: "owner", fields: [userId], references: [id], onDelete: Cascade)

  recipientId String
  recipient   User   @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  @@index([recipientId])
  @@index([quizId])
  @@index([userId])
}

model Question {
  id            String       @id @default(cuid())
  isUsed        Boolean      @default(false)
  answer1       String
  answer2       String
  answer3       String
  answer4       String       
  correctAnswer String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  image         String?
  text          String?
  userAnswers   UserAnswer[]

  quizId Int
  quiz   Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId])
}

model UserAnswer {
  id             String   @id @default(cuid())
  selectedAnswer String
  correctAnswer  Boolean

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  userAnsweredQuizId String?
  userAnsweredQuiz  UserAnsweredQuiz? @relation(fields: [userAnsweredQuizId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([questionId])
  @@index([userAnsweredQuizId])
}

model UserAnsweredQuiz {
  id        String   @id @default(cuid())
  completed Boolean  @default(false)
  time      Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quizId Int
  quiz   Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  userAnswers UserAnswer[]

  @@unique([quizId, userId])
  @@index([quizId])
  @@index([userId])
}

model Feedback {
  id        Int      @id @default(autoincrement())
  name      String
  email     String?
  message   String  @db.VarChar(350)
  createdAt DateTime @default(now())
}

model AllegianceQuiz {
  id Int @id @default(autoincrement())

  score      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  assignedTo Int?

  quizId Int  @unique
  quiz   Quiz @relation(fields: [quizId], references: [id])

  allegianceId String
  allegiance   Allegiance @relation(fields: [allegianceId], references: [id], onDelete: Cascade)
  
  categoryId   Int        @unique
  category     Category   @relation(fields: [categoryId], references: [id])

  @@index([allegianceId])
  @@index([quizId])
}

model Allegiance {
  id          String    @id @default(cuid())
  leaderId    String
  name        String   @unique
  image       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  quizCategories      QuizCategory[]
  categories          Category[]
  members AllegianceMember[]
  quizzes AllegianceQuiz[]

  @@index([leaderId])
}

model AllegianceMember {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  allegianceRole AllegianceRole @default(MEMBER)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  allegianceId String
  allegiance   Allegiance @relation(fields: [allegianceId], references: [id])

  @@index([allegianceId])
}

// model Leader {
//   id          Int         @id @default(autoincrement())
//   userId      String      @unique
//   user        User        @relation(fields: [userId], references: [id])
//   allegiance  Allegiance  @relation(fields: [allegianceId], references: [id])
//   allegianceId Int

//   @@index([userId])
//   @@index([allegianceId])
// }

// model Member {
//   id          Int         @id @default(autoincrement())
//   userId      String      @unique
//   user        User        @relation(fields: [userId], references: [id])
//   allegiance  Allegiance  @relation(fields: [allegianceId], references: [id])
//   allegianceId Int

//   @@index([userId])
//   @@index([allegianceId])
// }
